name: Main Foodgram workflow

on:
  push:
    branches: [ master ]

jobs:
#  tests:
#    runs-on: ubuntu-latest
#    services:
#      postgres:
#        image: postgres:13.10
#        env:
#          POSTGRES_USER: django_user
#          POSTGRES_PASSWORD: django_password
#          POSTGRES_DB: django_db
#        ports:
#          - 5432:5432
#        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
#    steps:
#    - uses: actions/checkout@v3
#    - name: Set up Python
#      uses: actions/setup-python@v4
#      with:
#        python-version: 3.9
#
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install flake8
#        cd backend/
#        pip install -r requirements.txt
#
#    - name: Test with flake8
#      run: |
#        python -m flake8
#
#  build_and_push_to_docker_hub:
#    name: Push Docker image to DockerHub
#    runs-on: ubuntu-latest
#    needs: tests
#    steps:
#      - name: Check out the repo
#        uses: actions/checkout@v3
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#
#      - name: Login to Docker
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#
#      - name: Push backend to Docker Hub
#        uses: docker/build-push-action@v2
#        with:
#          context: ./backend
#          push: true
#          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
#
#      - name: Push frontend to Docker Hub
#        uses: docker/build-push-action@v2
#        with:
#          context: ./frontend
#          push: true
#          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest

#  deploy:
#    runs-on: ubuntu-latest
#    needs:
#      - build_and_push_to_docker_hub
#    steps:
#    - name: Checkout repo
#      uses: actions/checkout@v3
#
#    - name: Copy docker-compose.yml via ssh
#      uses: appleboy/scp-action@master
#      with:
#        host: ${{ secrets.HOST }}
#        username: ${{ secrets.USER }}
#        key: ${{ secrets.SSH_KEY }}
#        passphrase: ${{ secrets.SSH_PASSPHRASE }}
#        source: "docker-compose.production.yml"
#        target: "foodgram/infra"
#
#    - name: Executing remote ssh commands to deploy
#      uses: appleboy/ssh-action@master
#      with:
#        host: ${{ secrets.HOST }}
#        username: ${{ secrets.USER }}
#        key: ${{ secrets.SSH_KEY }}
#        passphrase: ${{ secrets.SSH_PASSPHRASE }}
#        script: |



#  deploy:
#    runs-on: ubuntu-latest
##    needs: build_and_push_to_docker_hub
#    steps:
#      - name: executing remote ssh commands to deploy
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.HOST }}
#          username: ${{ secrets.USER }}
#          key: ${{ secrets.SSH_KEY }}
#          passphrase: ${{ secrets.SSH_PASSPHRASE }}
#          script: |
##            sudo docker compose -f foodgram/infra/docker-compose.production.yml down
##            cd foodgram/infra
#
#            sudo docker compose stop
#            sudo docker compose rm backend
#            sudo docker compose rm frontend

#            sudo docker compose -f docker-compose.production.yml pull
#            sudo docker compose -f docker-compose.production.yml down
#            sudo docker compose -f docker-compose.production.yml up -d
#            sudo rm -f .env
#            sudo touch .env

#            sudo echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
#            sudo echo POSTGRES_ENGINE=${{ secrets.POSTGRES_ENGINE }} >> .env
#            sudo echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
#            sudo echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
#            sudo echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
#            sudo echo DB_HOST=${{ secrets.DB_HOST }} >> .env
#            sudo echo DB_PORT=${{ secrets.DB_PORT }} >> .env
#            sudo echo DEBUG=${{ secrets.DEBUG }} >> .env
#            sudo echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
#
#            sudo docker-compose up -d --build
#            sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
#            sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic
#            sudo docker compose -f docker-compose.production.yml exec backend python manage.py importcsv

  deploy:
      runs-on: ubuntu-latest
#      needs:
#        # Дождёмся билда всех образов Taski
#        - build_and_push_to_docker_hub
#        - build_frontend_and_push_to_docker_hub
#        - build_gateway_and_push_to_docker_hub
      steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      # Копируем docker-compose.production.yml на продакшен-сервер
      - name: Copy docker-compose.yml via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "infra/docker-compose.production.yml"
          target: "foodgram/infra"
      - name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd foodgram/infra
#            sudo docker compose -f docker-compose.production.yml pull
#            sudo docker compose -f docker-compose.production.yml stop
#            sudo docker compose -f docker-compose.production.yml rm backend frontend
            sudo docker compose -f docker-compose.production.yml down
            sudo docker image rm ${{ secrets.DOCKER_USERNAME }}/foodgram_backend ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend

#            sudo docker compose -f docker-compose.production.yml pull
#            sudo docker compose -f docker-compose.production.yml down
            
            sudo rm -f .env
            sudo touch .env
            sudo chmod 666 .env

            sudo echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
            sudo echo POSTGRES_ENGINE=${{ secrets.POSTGRES_ENGINE }} >> .env
            sudo echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
            sudo echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            sudo echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            sudo echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            sudo echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            sudo echo DEBUG=${{ secrets.DEBUG }} >> .env
            sudo echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
            
            sudo docker compose -f docker-compose.production.yml up -d --build
#            sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
#            sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic
#            sudo docker compose -f docker-compose.production.yml exec backend python manage.py importcsv

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: Деплой foodgram успешно выполнен!
